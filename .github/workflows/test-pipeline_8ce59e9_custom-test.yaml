name: test-pipeline_8ce59e9_custom-test Pipeline (Skyu Generated)
'on':
  workflow_dispatch: {}
  repository_dispatch:
    types: pipeline_99458ddd-1b28-49c6-87c1-2e0f643031f8
env:
  ENCODED_PIPELINE_SECRET: ${{secrets.CUSTOMTEMPLATES_TESTPIPELINE_8CE59E9_CUSTOMTEST}}
  COMMIT_ID: ${{github.event.client_payload.commitId || github.sha || github.run_id}}
  BRANCH_NAME: >-
    ${{github.event.client_payload.branchName || github.event.branch ||
    github.ref_name}}
jobs:
  _status-pending:
    name: _status-pending
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Pipeline Started'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/PENDING?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
    needs: []
    permissions: write-all
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
  _status_testing:
    name: _status_testing
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Testing'
        run: |2-

              # NOTE: Do not remove this job even if you don't have tests at the moment.
              echo "Hello Tests from SkyU"
              
    needs:
      - _status-pending
    permissions: write-all
    runs-on: ubuntu-latest
  plan:
    name: plan
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Launch-Template&status=Started' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::678356101643:role/custm-infra-arn
      - name: Create Credentials File
        run: >-
          mkdir $HOME/.aws/ && touch $HOME/.aws/credentials && echo "[default]"
          > $HOME/.aws/credentials && echo
          "aws_access_key_id=${{env.AWS_ACCESS_KEY_ID}}" >>
          $HOME/.aws/credentials && echo
          "aws_secret_access_key=${{env.AWS_SECRET_ACCESS_KEY}}" >>
          $HOME/.aws/credentials && echo
          "aws_session_token=${{env.AWS_SESSION_TOKEN}}" >>
          $HOME/.aws/credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.9.8
          terraform_wrapper: false
      - name: Push Terraform Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=InProgress' --header
          "x-auth-by: sa" --header "x-organization-id: ${{
          env.PIPELINE_ORGANIZATION_ID }}" --header "x-project-id: ${{
          env.PIPELINE_PROJECT_ID }}" --header "x-credential-id: ${{
          env.PIPELINE_CREDENTIAL_ID }}" --header "Authorization: Bearer ${{
          env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Terraform Init
        working-directory: infra-folder
        run: terraform init
      - name: Push Terraform Status [INIT] [FAILED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=Failed' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
        if: failure()
      - name: Push Terraform Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=Success' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terraform Status [PLAN] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Plan&status=InProgress' --header
          "x-auth-by: sa" --header "x-organization-id: ${{
          env.PIPELINE_ORGANIZATION_ID }}" --header "x-project-id: ${{
          env.PIPELINE_PROJECT_ID }}" --header "x-credential-id: ${{
          env.PIPELINE_CREDENTIAL_ID }}" --header "Authorization: Bearer ${{
          env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Terraform Plan
        working-directory: infra-folder
        run: terraform plan
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ env.GITHUB_TOKEN }}
      - name: Push Terraform Status [PLAN] [FAILED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Plan&status=Failed' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
        if: failure()
      - name: Push Terraform Status [PLAN] [SUCCESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Plan&status=Success' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
    needs:
      - _status_testing
    permissions: write-all
    runs-on: ubuntu-latest
  apply:
    name: apply
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: Launch Template Starts Status [LAUNCH_TEMPLATE] [STARTED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Launch-Template&status=Started' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.CLOUD_REGION }}
          role-to-assume: ${{ env.ROLE_ARN }}
      - name: Create Credentials File
        run: >-
          mkdir $HOME/.aws/ && touch $HOME/.aws/credentials && echo "[default]"
          > $HOME/.aws/credentials && echo
          "aws_access_key_id=${{env.AWS_ACCESS_KEY_ID}}" >>
          $HOME/.aws/credentials && echo
          "aws_secret_access_key=${{env.AWS_SECRET_ACCESS_KEY}}" >>
          $HOME/.aws/credentials && echo
          "aws_session_token=${{env.AWS_SESSION_TOKEN}}" >>
          $HOME/.aws/credentials
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: v1.9.8
          terraform_wrapper: false
      - name: Push Terraform Status [INIT] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=InProgress' --header
          "x-auth-by: sa" --header "x-organization-id: ${{
          env.PIPELINE_ORGANIZATION_ID }}" --header "x-project-id: ${{
          env.PIPELINE_PROJECT_ID }}" --header "x-credential-id: ${{
          env.PIPELINE_CREDENTIAL_ID }}" --header "Authorization: Bearer ${{
          env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Terraform Init
        working-directory: infra-folder
        run: 'terraform init '
      - name: Push Terraform Status [INIT] [FAILED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=Failed' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
        if: failure()
      - name: Push Terraform Status [INIT] [SUCCESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Plan-Terraform-Init&status=Success' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: '[SLEEP]'
        run: sleep 3
      - name: Push Terraform Status [APPLY] [IN_PROGRESS]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Terraform-Apply&status=InProgress' --header "x-auth-by:
          sa" --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
      - name: Terraform Apply
        working-directory: infra-folder
        run: terraform apply  -auto-approve
      - name: Push Terraform Status [APPLY] [FAILED]
        run: >-
          curl --location --request POST '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID }}?stepName=Terraform-Apply&status=Failed'
          --header "x-auth-by: sa" --header "x-organization-id: ${{
          env.PIPELINE_ORGANIZATION_ID }}" --header "x-project-id: ${{
          env.PIPELINE_PROJECT_ID }}" --header "x-credential-id: ${{
          env.PIPELINE_CREDENTIAL_ID }}" --header "Authorization: Bearer ${{
          env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
        if: failure()
      - name: Push Terraform Status [APPLY] [SUCCESS]
        working-directory: infra-folder
        run: >-
          TERRAFORM_OUTPUT=$(terraform output --json) && curl --location
          --request POST "${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/${{
          env.PIPELINE_APPLICATION_ID
          }}?stepName=Terraform-Apply&status=Success" --header "x-auth-by: sa"
          --header "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}"
          --header "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
          --header "Content-Type: application/json" --data
          "{\"terraformoutputs\": $TERRAFORM_OUTPUT}"
      - name: Delete Infra Branch
        run: >-
          curl --location --request DELETE '${{ env.PIPELINE_SERVICE_EP
          }}/infrastructure-service/infrastructure/branch/${{
          env.PIPELINE_APPLICATION_ID }}' --header "x-auth-by: sa" --header
          "x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}" --header
          "x-project-id: ${{ env.PIPELINE_PROJECT_ID }}" --header
          "x-credential-id: ${{ env.PIPELINE_CREDENTIAL_ID }}" --header
          "Authorization: Bearer ${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}"
    needs:
      - plan
      - _status_testing
    permissions: write-all
    if: >-
      github.event.pull_request.merged == true || github.ref ==
      'refs/heads/main'
    runs-on: ubuntu-latest
  _status-success:
    name: _status-success
    steps:
      - name: 'Run :: Start'
        run: |2-

              echo " Starting GitHub Action!" && 
              echo "STEPS_CAN_PROCEED=true" >> $GITHUB_ENV
              
      - name: 'Run :: Checkout repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Run :: Checkout Specific Commit'
        env:
          COMMIT_ID: ${{ github.event.client_payload.commitId }}
          BRANCH_NAME: ${{ github.event.client_payload.branchName }}
        if: >-
          ${{ github.event.client_payload.commitId != null ||
          github.event.client_payload.branchName != null }}
        run: |2-

              echo "Starting the checkout process..."
              git fetch --all
              if [ -n "$COMMIT_ID" ]; then
                echo "Commit ID provided: $COMMIT_ID"
                git checkout $COMMIT_ID || true
                echo "Checked out to commit ID: $COMMIT_ID"
              elif [ -n "$BRANCH_NAME" ]; then
                echo "Branch name provided: $BRANCH_NAME"
                git checkout $BRANCH_NAME || true
                echo "Checked out to branch: $BRANCH_NAME"

                #Updating the commit Id
                ACTUAL_COMMIT_ID=$(git rev-parse HEAD)
                echo "Changing CommitId: $ACTUAL_COMMIT_ID"
                echo "COMMIT_ID=$ACTUAL_COMMIT_ID" >> $GITHUB_ENV
              else
                echo "Skipping checkout..."
              fi
            
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Success'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/SUCCESS?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")
              
    needs:
      - _status_testing
      - plan
      - apply
    permissions: write-all
    if: ${{ !(failure() || cancelled()) }}
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
  _status-failed:
    name: _status-failed
    steps:
      - name: 'Run :: Decoding Secrets'
        run: |2-

                if [ ! -x "$(command -v jq)" ]; then
                  echo "jq not found, installing..."
                  sudo apt-get update
                  sudo apt-get install -y jq
                fi
                echo "${{ env.ENCODED_PIPELINE_SECRET }}" | base64 --decode | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while read line; do echo "$line" >> $GITHUB_ENV; echo "::add-mask::${line#*=}"; done
                
      - name: 'Run :: Pipeline Failed'
        env:
          RUN_ID: ${{ github.run_id }}
        run: |2-

              context=$(echo "$CONTEXT_JSON" | jq --arg sha "$COMMIT_ID" '.sha = $sha' | jq -c . | base64)
              response=$(curl -X PUT -d "runId=$RUN_ID&context=$context&appId=${{ github.event.client_payload.externalRepo.appId }}"  -H 'Authorization: ${{ env.SERVICE_ACC_ACCESS_TOKEN }}' -H 'x-organization-id: ${{ env.PIPELINE_ORGANIZATION_ID }}' -H 'x-project-id: ${{ env.PIPELINE_PROJECT_ID }}' -H 'x-environment-id: ${{ env.PIPELINE_ENVIRONMENT_ID }}' -H 'x-trace-id: ${{ env.PIPELINE_TRACE_ID }}' -H 'x-auth-by: sa' -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.PIPELINE_SERVICE_EP }}/${{ env.PIPELINE_ID }}/FAILED?releaseId=${{ github.event.client_payload.releaseData.releaseId }}")

              # Triggering SkyU Alerts
              response=$(curl -X POST -d "labels[alertname]=pipelineFailed&labels[pipelineId]=${{ env.PIPELINE_ID }}&labels[system]=skyu&message=Pipeline Failed&messageTitle=Pipeline ${{ env.PIPELINE_ID }} Failed&status=firing"  -H 'Content-Type: application/x-www-form-urlencoded'  "${{ env.FIRE_SKYU_ALERT_EP }}?organizationId=${{ env.PIPELINE_ORGANIZATION_ID }}&projectId=${{ env.PIPELINE_PROJECT_ID }}&environmentId=${{ env.PIPELINE_ENVIRONMENT_ID }}&token=${{ env.SERVICE_ACC_ACCESS_TOKEN_STRIPPED }}&authBy=sa")

              if echo "$response" | grep -q '"success":true'; then
                echo "SUCCESS :: $response"
              else
                echo "FAILED :: $response"
              fi
              
    needs:
      - _status_testing
      - plan
      - apply
    permissions: write-all
    if: ${{ failure() || cancelled() }}
    env:
      CONTEXT_JSON: ${{ toJson(github) }}
    runs-on: ubuntu-latest
